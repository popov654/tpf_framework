        <style>
            :root {
                --hue: 182.57;
                --bg: hsl(var(--hue),10%,60%);
                --fg: hsl(var(--hue),10%,10%);
                --primary: hsl(var(--hue),56%,30%);
                --trans-dur: 0.3s;
                --trans-timing: cubic-bezier(0.65,0,0.35,1);
            }
            button {
                font: 1em/1.5 "DM Sans", sans-serif;
            }
            .steps {
                background-color: white;
                border-radius: 0.75em;
                display: flex;
                padding: 1.5em;
                flex-direction: column;
                justify-content: center;
                width: 100%;
            }
            .steps__connector, .steps__step {
                position: relative;
            }
            .steps__connector {
                background-color: hsl(var(--hue), 10%, 80%);
                margin-inline-start: 0.75em;
                width: 0.125em;
                height: 1.25em;
                transform: translateX(-50%);
                transition: background-color var(--trans-dur);
            }
            .steps__connector::before {
                background-color: var(--primary);
                content: "";
                display: block;
                width: 100%;
                height: 100%;
                transform: scale(1, 0);
                transform-origin: 50% 0;
                transition: background-color var(--trans-dur), transform var(--trans-dur) var(--trans-timing);
            }
            .steps__step {
                display: flex;
                align-items: center;
                flex-shrink: 0;
                z-index: 1;
            }
            .steps__step-name {
                color: hsl(var(--hue), 10%, 50%);
                font-size: 0.8em;
                line-height: 2.4;
                transition: color var(--trans-dur) var(--trans-timing), font-weight var(--trans-dur) var(--trans-timing);
            }
            .steps__step-number {
                background-color: hsl(var(--hue), 10%, 80%);
                color: white;
                border-radius: 50%;
                margin-inline-end: 0.5em;
                text-align: center;
                width: 1.5em;
                height: 1.5em;
                transition: background-color var(--trans-dur) var(--trans-timing), box-shadow var(--trans-dur) var(--trans-timing);
            }
            .steps__step--current .steps__step-name, .steps__step--done .steps__step-name {
                color: hsl(var(--hue), 10%, 10%);
                font-weight: 700;
            }
            .steps__step--current .steps__step-number, .steps__step--done .steps__step-number {
                background-color: var(--primary);
            }
            .steps__step--current .steps__step-number, .steps__step--current .steps__step-name {
                transition-delay: var(--trans-dur);
            }
            .steps__step--current .steps__step-number {
                box-shadow: 0 0 0 0.125em hsla(var(--hue), 90%, 30%, 0.4);
            }
            .steps__step--done + .steps__connector:before {
                transform: scale(1, 1);
            }

            .steps {
                flex-direction: row;
                align-items: center;
                padding: 1.5em 2.25em 2.25em 2.25em;
            }
            .steps__connector {
                margin-inline-start: 0;
                width: 100%;
                height: 0.125em;
                transform: translateY(-50%);
            }
            .steps__connector:before {
                transform: scale(0, 1);
                transform-origin: 0 50%;
            }
            [dir=rtl] .steps__connector:before {
                transform-origin: 100% 50%;
            }
            .steps__step-name {
                position: absolute;
                top: 100%;
                left: 50%;
                text-align: center;
                width: 6em;
                transform: translateX(-50%);
            }
            .steps__step-number {
                margin-inline-end: 0;
            }

            /* Dark theme */
            @media (prefers-color-scheme: dark) {
                :root {
                    --bg: hsl(var(--hue),10%,10%);
                    --fg: hsl(var(--hue),10%,90%);
                    --primary: hsl(var(--hue),90%,70%);
                }
                .steps {
                    background-color: hsl(var(--hue), 10%, 20%);
                }
                .steps__connector {
                    background-color: hsl(var(--hue), 10%, 40%);
                }
                .steps__step-name {
                    color: hsl(var(--hue), 10%, 50%);
                }
                .steps__step-number {
                    background-color: hsl(var(--hue), 10%, 40%);
                    color: hsl(var(--hue), 10%, 20%);
                }
                .steps__step--current .steps__step-name, .steps__step--done .steps__step-name {
                    color: hsl(var(--hue), 10%, 90%);
                }
            }
        </style>
        <script>
            "use strict";
            window.addEventListener("DOMContentLoaded", () => {
                const steps = new StepIndicator(".steps");
            });
            class StepIndicator {
                /**
                 * @param el CSS selector of the step indicator element
                 */
                constructor(el) {
                    /** Number of steps */
                    this._step = 0;
                    this.el = document.querySelector(el);
                    this.forms = this.el.parentNode.querySelectorAll(`[data-role="step"][data-step]`);
                    this.steps = this.el.parentNode.querySelectorAll(`.steps__step`).length;

                    this.forms.forEach(form => {
                        form.querySelectorAll("button").forEach(btn => {
                            btn.addEventListener("click", e => e.preventDefault());
                        });
                    });

                    document.addEventListener("click", this.clickAction.bind(this));
                    this.displayStep(this.step);
                    this.checkExtremes();
                    this.forms.forEach(form => {
                        form.style.display = form.dataset.step != this._step ? 'none' : '';
                    });
                }
                get step() {
                    return this._step;
                }
                set step(value) {
                    let currentForm = Array.from(this.forms).find(form => form.dataset.step == this._step);
                    let form = currentForm;
                    if (!currentForm) return;

                    let inputs = currentForm.querySelectorAll("input, textarea");
                    let isValid = !Array.from(inputs).filter(el => {
                        return !el.checkValidity();
                    }).length;
                    if (form.validator && !form.validator.ok) {
                        if (form.validator.ok === undefined) form.validator();
                        return;
                    }

                    if (value > this._step && !isValid) {
                        this._step = oldStep;
                        return;
                    }
                    this._step = value;

                    this.displayStep(value);
                    this.checkExtremes();
                    this.forms.forEach(form => {
                        form.style.display = form.dataset.step != this._step ? 'none' : '';
                        if (form.style.display == '') {
                           setTimeout(() => {
                               form.style.visibility = '';
                               form.querySelector("input").focus();
                           }, 150);
                        } else {
                           form.style.visibility = 'hidden';
                        }
                    });
                }
                /**
                 * @param e Click event
                 */
                clickAction(e) {
                    const button = e.target;
                    const actionName = button === null || button === void 0 ? void 0 : button.getAttribute("data-action");
                    if (actionName === "prev") {
                        this.prev();
                    }
                    else if (actionName === "next") {
                        this.next();
                    }
                }
                /** Go to the previous step. */
                prev() {
                    if (this.step > 0) {
                        --this.step;
                    }
                }
                /** Go to the next step. */
                next() {
                    if (this.step < this.steps - 1) {
                        ++this.step;
                    } else {
                        let form = this.forms[0];
                        while (form.parentNode && form.tagName != 'FORM') {
                            form = form.parentNode;
                        }
                        if (form.tagName == 'FORM') {
                           let target = form.target;
                           if (form.target.length && form.target != '_self' && form.getAttribute('data-redirect-uri')) {
                               let iframe = document.getElementsByName(form.target)[0] ?? null;
                               let redirect = function() {
                                   location.replace(form.getAttribute('data-redirect-uri'));
                               };
                               if (iframe) iframe.onload = redirect;
                               else setTimeout(redirect, 1300);
                               form.submit();
                           }
                           form.submit();
                        }
                    }
                }
                /** Disable the Previous or Next button if hitting the first or last step. */
                checkExtremes() {
                    const prevBtnEl = document.querySelector(`[data-action="prev"]`);
                    const nextBtnEl = document.querySelector(`[data-action="next"]`);
                    if (prevBtnEl) {
                        prevBtnEl.disabled = this.step <= 0;
                    }
                    if (nextBtnEl) {
                        if (this.step == this.steps-1) {
                            nextBtnEl.textContent = nextBtnEl.textContent.replace(/Next/g, 'Finish')
                        } else {
                            nextBtnEl.textContent = nextBtnEl.textContent.replace(/Finish/g, 'Next')
                        }
                    }
                }
                /**
                 * Update the indicator for a targeted step.
                 * @param targetStep Index of the step
                 */
                displayStep(targetStep) {
                    var _a;
                    const current = "steps__step--current";
                    const done = "steps__step--done";
                    for (let s = 0; s < this.steps; ++s) {
                        const stepEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-step="${s}"]`);
                        stepEl === null || stepEl === void 0 ? void 0 : stepEl.classList.remove(current, done);
                        if (s < targetStep) {
                            stepEl === null || stepEl === void 0 ? void 0 : stepEl.classList.add(done);
                        }
                        else if (s === targetStep) {
                            stepEl === null || stepEl === void 0 ? void 0 : stepEl.classList.add(current);
                        }
                    }
                }
            }
        </script>